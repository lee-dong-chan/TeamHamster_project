name: Deploy Project
on:
  push:
    branches:
      - main

jobs:
  deploy_front:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Install Dependencies of Front
        working-directory: ./front
        run: npm i

      - name: Setting .env
        working-directory: ./front
        run: |
          ${{ secrets.FRONT_ENV }}

      - name: Build Front
        working-directory: ./front
        run: npm run build

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/front
            mkdir /var/www/front'
          rsync -avz -e "ssh" ./front/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/front

      - name: Restart Nginx
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'

  # deploy_delivery:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout repository
  #       uses: actions/checkout@v4

  #     - name: Add SSH key
  #       uses: webfactory/ssh-agent@v0.5.4
  #       with:
  #         ssh-private-key: ${{ secrets.EC2_KEY }}

  #     - name: Ensure SSH directory exists
  #       run: |
  #         mkdir -p ~/.ssh
  #         chmod 700 ~/.ssh

  #     - name: Add SSH known hosts
  #       run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

  #     - name: Setting .env
  #       working-directory: ./delivery
  #       run: |
  #         echo "${{secrets.DEVLIVERY_ENV}}" >> .env

  #     - name: Install Dependencies of Front
  #       working-directory: ./delivery
  #       run: npm i

  #     - name: Build delivery
  #       working-directory: ./delivery
  #       run: npm run build

  #     - name: Copy Files to EC2
  #       run: |
  #         ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
  #           rm -rf /var/www/delivery
  #           mkdir /var/www/delivery'
  #         rsync -avz -e "ssh" ./front/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/delivery

  #     - name: Restart Nginx
  #       run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'

  # deploy_manege:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout repository
  #       uses: actions/checkout@v4

  #     - name: Add SSH key
  #       uses: webfactory/ssh-agent@v0.5.4
  #       with:
  #         ssh-private-key: ${{ secrets.EC2_KEY }}

  #     - name: Ensure SSH directory exists
  #       run: |
  #         mkdir -p ~/.ssh
  #         chmod 700 ~/.ssh

  #     - name: Add SSH known hosts
  #       run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

  #     - name: Setting .env
  #       working-directory: ./manege
  #       run: |
  #         echo "${{secrets.MANEGE_ENV}}" >> .env

  #     - name: Install Dependencies of Front
  #       working-directory: ./delivery
  #       run: npm i

  #     - name: Build delivery
  #       working-directory: ./delivery
  #       run: npm run build

  #     - name: Copy Files to EC2
  #       run: |
  #         ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
  #           rm -rf /var/www/manege
  #           mkdir /var/www/manege'
  #         rsync -avz -e "ssh" ./front/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/manege

  #     - name: Restart Nginx
  #       run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'

  #  deploy_delivery:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout repository
  #       uses: actions/checkout@v4

  #     - name: Add SSH key
  #       uses: webfactory/ssh-agent@v0.5.4
  #       with:
  #         ssh-private-key: ${{ secrets.EC2_KEY }}

  #     - name: Ensure SSH directory exists
  #       run: |
  #         mkdir -p ~/.ssh
  #         chmod 700 ~/.ssh

  #     - name: Add SSH known hosts
  #       run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

  #     - name: Setting .env
  #       working-directory: ./delivery
  #       run: |
  #         echo "${{secrets.DELIVERY_ENV}}" >> .env

  #     - name: Install Dependencies of Front
  #       working-directory: ./delivery
  #       run: npm i

  #     - name: Build delivery
  #       working-directory: ./delivery
  #       run: npm run build

  #     - name: Copy Files to EC2
  #       run: |
  #         ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
  #           rm -rf /var/www/delivery
  #           mkdir /var/www/delivery'
  #         rsync -avz -e "ssh" ./front/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/delivery

  #     - name: Restart Nginx
  #       run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'

  # deploy_back:
  #   runs-on: ubuntu-latest
  #   # needs:
  #   #   - test_node
  #   #   - test_mysql
  #   #   - test_mongo
  #   steps:
  #     - name: checkout repository
  #       uses: actions/checkout@v4

  #     - name: Add SSH key
  #       uses: webfactory/ssh-agent@v0.5.4
  #       with:
  #         ssh-private-key: ${{ secrets.EC2_KEY }}

  #     - name: Ensure SSH directory exists
  #       run: |
  #         mkdir -p ~/.ssh
  #         chmod 700 ~/.ssh

  #     - name: Add SSH known hosts
  #       run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

  #     - name: Install Dependencies of Back
  #       working-directory: ./backend
  #       run: npm i

  #     - name: Build Back
  #       working-directory: ./backend
  #       run: npx tsc

  #     - name: Copy Files to EC2
  #       run: |
  #         ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
  #           rm -rf /var/www/html/backend
  #           mkdir /var/www/html/backend'
  #         rsync -avz -e "ssh" ./backend/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/html/backend
  #         rsync -avz -e "ssh" ./backend/package.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/html/backend/package.json
  #         ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
  #           export NVM_DIR="$HOME/.nvm"
  #           if [ -s "$NVM_DIR/nvm.sh" ]; then
  #             . "$NVM_DIR/nvm.sh"
  #           else
  #             echo "nvm.sh not found"
  #             exit 1
  #           fi

  #           nvm use --lts
  #           cd /var/www/backend
  #           npm i --production'
