name: Deploy Project
on:
  push:
    branches:
      - main

jobs:
  deploy_front:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Install Dependencies of Front
        working-directory: ./front
        run: npm i

      - name: create .env
        working-directory: ./front
        run: |
          echo REACT_APP_SERVER_URL="${{ secrets.REACT_APP_SERVER_URL }}" > .env
          echo REACT_APP_IMG_BASE="${{ secrets.REACT_APP_IMG_BASE }}" >> .env
          echo REACT_APP_CLIENT_ID="${{ secrets.REACT_APP_CLIENT_ID }}" >>.env
          echo REACT_APP_G_CLIENT_ID="${{ secrets.REACT_APP_G_CLIENT_ID }}" >> .env
          echo REACT_APP_N_CLIENT_ID="${{ secrets.REACT_APP_N_CLIENT_ID }}" >> .env
          echo REACT_APP_SERVER_OAUTH_CALLBACK_URL ="${{ secrets.REACT_APP_SERVER_OAUTH_CALLBACK_URL  }}" >> .env

      - name: Build Front
        working-directory: ./front
        run: npm run build

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/front
            mkdir /var/www/front'
          rsync -avz -e "ssh" ./front/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/front

      - name: Restart Nginx
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'

  deploy_delivery:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Install Dependencies of Front
        working-directory: ./delivery
        run: npm i

      - name: create .env
        working-directory: ./delivery
        run: |
          echo REACT_APP_SERVER_URL="${{ secrets.REACT_APP_SERVER_URL }}" > /var/www/delivery/.env
          echo REACT_APP_IMG_BASE="${{ secrets.REACT_APP_IMG_BASE }}" >> /var/www/delivery/.env

      - name: Build delivery
        working-directory: ./delivery
        run: npm run build

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/delivery
            mkdir /var/www/delivery'
          rsync -avz -e "ssh" ./delivery/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/delivery

      - name: Restart Nginx
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'

  deploy_manege:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: create .env file
        run: |
          echo "${{ secrets.MANAGE_ENV }}" | sed 's/:/\n/g' > .env

      - name: Install Dependencies of manege
        working-directory: ./manege
        run: npm i

      - name: Build manege
        working-directory: ./manege
        run: npm run build

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/manege
            mkdir /var/www/manege'
          rsync -avz -e "ssh" ./manege/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/manege

      - name: Restart Nginx
        run: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'sudo service nginx restart'

  deploy_back:
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Ensure SSH directory exists
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

      - name: Add SSH known hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Install Dependencies of Back
        working-directory: ./backend
        run: npm i

      - name: Make confing
        working-directory: ./backend
        env:
          USERNAME: ${{ secrets.MYSQL_USER}}
          PASSWORD: ${{ secrets.MYSQL_PASSWORD}}
          DATABASE: ${{ secrets.MYSQL_DB}}
          HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir config
          echo   "{
           \"development\": {
              \"username\": \"$USERNAME\",
              \"password\": \"$PASSWORD\",
              \"database\": \"$DATABASE\",
              \"host\": \"$HOST\",
              \"dialect\": \"mysql\"
            }
          }" > config/config.json

      - name: Build Back
        working-directory: ./backend
        run: npx tsc

      - name: Copy Files to EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/backend
            mkdir /var/www/backend'
          rsync -avz -e "ssh" ./backend/build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/backend
          rsync -avz -e "ssh" ./backend/package.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/backend/package.json

      - name: Install and Configure Node.js and PM2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
            else 
              echo "nvm.sh not found"
              exit 1
            fi
            nvm use --lts
            cd /var/www/backend
            npm i --production 
            echo COOKIE="${{ secrets.COOKIE }}" > /var/www/backend/.env
            echo SESSION="${{ secrets.SESSION }}" >> /var/www/backend/.env
            echo PORT="${{ secrets.PORT}}" >> /var/www/backend/.env
            echo MONGURL="${{ secrets.MONGURL }}" >> /var/www/backend/.env
            echo IV="${{ secrets.IV }}" >> /var/www/backend/.env
            echo SALT="${{ secrets.SALT }}" >> /var/www/backend/.env
            echo KEY="${{ secrets.KEY  }}" >> /var/www/backend/.env'

      - name: Start Server
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
            else 
              echo "nvm.sh not found"
              exit 1
            fi
            nvm use --lts
            npm install -g pm2
            pm2 stop all
            pm2 start /var/www/backend/src/server.js --name backend
          '
